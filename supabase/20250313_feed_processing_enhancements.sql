-- Migration script for feed processing enhancements
-- This adds the necessary tables and fields for the Edge Function implementation

-- Check if feed_processing_jobs table exists, if not create it
DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'feed_processing_jobs') THEN
        CREATE TABLE public.feed_processing_jobs (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            status VARCHAR(50) NOT NULL DEFAULT 'pending',
            job_type VARCHAR(50) NOT NULL DEFAULT 'feed_processing',
            created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
            started_at TIMESTAMPTZ,
            completed_at TIMESTAMPTZ,
            last_updated TIMESTAMPTZ,
            created_by UUID REFERENCES auth.users(id),
            is_cron BOOLEAN DEFAULT FALSE,
            total_sites INT DEFAULT 0,
            processed_sites INT DEFAULT 0,
            processed_items INT DEFAULT 0,
            error_count INT DEFAULT 0,
            current_site VARCHAR(255),
            error TEXT,
            duration INT
        );
    ELSE
        -- Add new columns for batch processing if they don't exist
        IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.feed_processing_jobs'::regclass AND attname = 'job_type') THEN
            ALTER TABLE public.feed_processing_jobs ADD COLUMN job_type VARCHAR(50) NOT NULL DEFAULT 'feed_processing';
        END IF;
        
        IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.feed_processing_jobs'::regclass AND attname = 'current_batch') THEN
            ALTER TABLE public.feed_processing_jobs ADD COLUMN current_batch INT DEFAULT 0;
        END IF;
        
        IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.feed_processing_jobs'::regclass AND attname = 'total_batches') THEN
            ALTER TABLE public.feed_processing_jobs ADD COLUMN total_batches INT DEFAULT 1;
        END IF;
        
        IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.feed_processing_jobs'::regclass AND attname = 'batch_size') THEN
            ALTER TABLE public.feed_processing_jobs ADD COLUMN batch_size INT DEFAULT 10;
        END IF;
        
        IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.feed_processing_jobs'::regclass AND attname = 'last_processed_site_id') THEN
            ALTER TABLE public.feed_processing_jobs ADD COLUMN last_processed_site_id INT;
        END IF;
        
        IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.feed_processing_jobs'::regclass AND attname = 'last_processed_item_id') THEN
            ALTER TABLE public.feed_processing_jobs ADD COLUMN last_processed_item_id INT;
        END IF;
        
        IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.feed_processing_jobs'::regclass AND attname = 'metadata') THEN
            ALTER TABLE public.feed_processing_jobs ADD COLUMN metadata JSONB DEFAULT '{}'::JSONB;
        END IF;
    END IF;
END
$$;

-- Create edge_function_logs table for activity logging
CREATE TABLE IF NOT EXISTS public.edge_function_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  function_name VARCHAR(100) NOT NULL,
  execution_id UUID NOT NULL DEFAULT gen_random_uuid(),
  job_id BIGINT REFERENCES public.feed_processing_jobs(id),
  status VARCHAR(50) NOT NULL,
  started_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  completed_at TIMESTAMPTZ,
  duration_ms INTEGER,
  success BOOLEAN,
  error TEXT,
  
  -- Detailed metrics
  items_processed INTEGER DEFAULT 0,
  items_failed INTEGER DEFAULT 0,
  memory_used_mb FLOAT,
  
  -- Context information
  context JSONB DEFAULT '{}'::JSONB
);

-- Create edge_function_steps table for detailed step tracking
CREATE TABLE IF NOT EXISTS public.edge_function_steps (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  log_id BIGINT REFERENCES public.edge_function_logs(id) ON DELETE CASCADE,
  step_name VARCHAR(100) NOT NULL,
  started_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  completed_at TIMESTAMPTZ,
  duration_ms INTEGER,
  success BOOLEAN,
  message TEXT,
  data JSONB DEFAULT '{}'::JSONB
);

-- Create feed_processing_events table for extensibility
CREATE TABLE IF NOT EXISTS public.feed_processing_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  job_id BIGINT REFERENCES public.feed_processing_jobs(id),
  event_type VARCHAR(50) NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  payload JSONB DEFAULT '{}'::JSONB,
  processed BOOLEAN DEFAULT FALSE,
  processed_at TIMESTAMPTZ
);

-- Create view for admin dashboard
CREATE OR REPLACE VIEW public.admin_activity_logs AS
SELECT 
  l.id,
  l.function_name,
  l.execution_id,
  l.job_id,
  l.status,
  l.started_at,
  l.completed_at,
  l.duration_ms,
  l.success,
  l.error,
  l.items_processed,
  l.items_failed,
  j.total_sites,
  j.processed_sites,
  j.total_batches,
  j.current_batch,
  j.batch_size,
  j.current_site,
  COUNT(s.id) AS total_steps,
  SUM(CASE WHEN s.success = true THEN 1 ELSE 0 END) AS successful_steps
FROM 
  public.edge_function_logs l
LEFT JOIN 
  public.feed_processing_jobs j ON l.job_id = j.id
LEFT JOIN 
  public.edge_function_steps s ON s.log_id = l.id
GROUP BY 
  l.id, j.id
ORDER BY 
  l.started_at DESC;

-- Add RLS policies for the new tables
ALTER TABLE public.edge_function_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.edge_function_steps ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.feed_processing_events ENABLE ROW LEVEL SECURITY;

-- Create policies for admin access
CREATE POLICY "Allow full access to admins" ON public.edge_function_logs
  FOR ALL USING (
    (SELECT is_admin FROM public.user_profiles WHERE user_id = auth.uid())
  );

CREATE POLICY "Allow full access to admins" ON public.edge_function_steps
  FOR ALL USING (
    (SELECT is_admin FROM public.user_profiles WHERE user_id = auth.uid())
  );

CREATE POLICY "Allow full access to admins" ON public.feed_processing_events
  FOR ALL USING (
    (SELECT is_admin FROM public.user_profiles WHERE user_id = auth.uid())
  );

-- Create policies for service role access
CREATE POLICY "Allow service role access" ON public.edge_function_logs
  FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Allow service role access" ON public.edge_function_steps
  FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Allow service role access" ON public.feed_processing_events
  FOR ALL USING (auth.role() = 'service_role');